{"ast":null,"code":"import axios from 'axios';\nimport * as route from '../config/Routes';\nexport const SHOW_IMAGE_UPLOAD_DIALOG = 'SHOW_IMAGE_UPLOAD_DIALOG';\nexport const HIDE_IMAGE_UPLOAD_DIALOG = 'HIDE_IMAGE_UPLOAD_DIALOG';\nexport const UPLOAD_PENDING = 'UPLOAD PENDING';\nexport const UPLOAD_SUCCESS = 'UPLOAD_SUCCESS';\nexport const UPLOAD_ERROR = 'UPLOAD_ERROR';\nexport function getShowImageUploadDialogAction() {\n  return {\n    type: SHOW_IMAGE_UPLOAD_DIALOG\n  };\n}\nexport function getHideImageUploadDialogAction() {\n  return {\n    type: HIDE_IMAGE_UPLOAD_DIALOG\n  };\n}\nexport function getUploadPendingAction() {\n  return {\n    type: UPLOAD_PENDING\n  };\n}\nexport function getUploadSuccessAction(response) {\n  return {\n    type: UPLOAD_SUCCESS,\n    response: response\n  };\n}\nexport function getUploadErrorAction() {\n  return {\n    type: UPLOAD_ERROR\n  };\n}\n/**\n * @param token - user session token\n * @param formData - uploaded image wrapped in a form\n * \n * This function calls the upload function and handels the response.\n * It dispatches the actions.\n*/\n\nexport function imageUpload(token, formData) {\n  return dispatch => {\n    dispatch(getUploadPendingAction());\n    upload(token, formData).then(function (response) {\n      console.log(\"imageUpload response: \" + JSON.stringify(response));\n      const action = getUploadSuccessAction(response);\n      dispatch(action);\n    }, error => {\n      dispatch(getUploadErrorAction(error));\n    }).catch(error => {\n      dispatch(getUploadErrorAction(error));\n    });\n  };\n}\n/**\n * @param token - user session token\n * @param formData - uploaded image wrapped in a form\n * \n * This function sends the image included in the formData to the\n * backend and returns the response recieved from the backend. \n*/\n\nasync function upload(token, formData) {\n  return await axios({\n    method: \"post\",\n    url: route.IMAGE_UPLOAD,\n    data: formData,\n    headers: {\n      \"token\": token,\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(response => {\n    if (response.status === 200) {\n      console.log(\"Response from image upload: \" + JSON.stringify(response.data));\n      /* TODO\n      *  Je nachdem was der Server returned, können wir hier die Daten aufbereiten,\n      *  eh sie an die components übergeben werden.\n      */\n\n      return response;\n    } else {\n      console.log(\"Error occured in image upload response.\");\n    }\n  }).catch(error => {\n    console.log(\"Error occured in image upload.\");\n    console.log(error);\n    return error;\n  });\n}","map":{"version":3,"sources":["/Users/anne/Documents/Studium/Beuth_MI/Semester 5/Projekt/iss-frontend/src/actions/ImageUploadActions.js"],"names":["axios","route","SHOW_IMAGE_UPLOAD_DIALOG","HIDE_IMAGE_UPLOAD_DIALOG","UPLOAD_PENDING","UPLOAD_SUCCESS","UPLOAD_ERROR","getShowImageUploadDialogAction","type","getHideImageUploadDialogAction","getUploadPendingAction","getUploadSuccessAction","response","getUploadErrorAction","imageUpload","token","formData","dispatch","upload","then","console","log","JSON","stringify","action","error","catch","method","url","IMAGE_UPLOAD","data","headers","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AAEA,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,SAASC,8BAAT,GAAyC;AAC5C,SAAO;AACHC,IAAAA,IAAI,EAAEN;AADH,GAAP;AAGH;AAED,OAAO,SAASO,8BAAT,GAAyC;AAC5C,SAAO;AACHD,IAAAA,IAAI,EAAEL;AADH,GAAP;AAGH;AAED,OAAO,SAASO,sBAAT,GAAiC;AACpC,SAAO;AACHF,IAAAA,IAAI,EAAEJ;AADH,GAAP;AAGH;AAED,OAAO,SAASO,sBAAT,CAAgCC,QAAhC,EAAyC;AAC5C,SAAO;AACHJ,IAAAA,IAAI,EAAEH,cADH;AAEHO,IAAAA,QAAQ,EAAEA;AAFP,GAAP;AAIH;AAED,OAAO,SAASC,oBAAT,GAA+B;AAClC,SAAO;AACHL,IAAAA,IAAI,EAAEF;AADH,GAAP;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,WAAT,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsC;AACzC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACP,sBAAsB,EAAvB,CAAR;AACAQ,IAAAA,MAAM,CAACH,KAAD,EAAQC,QAAR,CAAN,CACKG,IADL,CACU,UAASP,QAAT,EAAkB;AACpBQ,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BC,IAAI,CAACC,SAAL,CAAeX,QAAf,CAAvC;AACA,YAAMY,MAAM,GAAGb,sBAAsB,CAACC,QAAD,CAArC;AACAK,MAAAA,QAAQ,CAACO,MAAD,CAAR;AACH,KALL,EAMIC,KAAK,IAAG;AACJR,MAAAA,QAAQ,CAACJ,oBAAoB,CAACY,KAAD,CAArB,CAAR;AACH,KARL,EASKC,KATL,CASWD,KAAK,IAAG;AACXR,MAAAA,QAAQ,CAACJ,oBAAoB,CAACY,KAAD,CAArB,CAAR;AACH,KAXL;AAYH,GAdD;AAeH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeP,MAAf,CAAsBH,KAAtB,EAA6BC,QAA7B,EAAuC;AAEnC,SAAO,MAAMhB,KAAK,CAAC;AACf2B,IAAAA,MAAM,EAAE,MADO;AAEfC,IAAAA,GAAG,EAAE3B,KAAK,CAAC4B,YAFI;AAGfC,IAAAA,IAAI,EAAEd,QAHS;AAIfe,IAAAA,OAAO,EAAE;AACL,eAAShB,KADJ;AAEL,sBAAgB;AAFX;AAJM,GAAD,CAAL,CASZI,IATY,CASPP,QAAQ,IAAI;AACd,QAAGA,QAAQ,CAACoB,MAAT,KAAoB,GAAvB,EAA4B;AACxBZ,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCC,IAAI,CAACC,SAAL,CAAeX,QAAQ,CAACkB,IAAxB,CAA7C;AACA;AACZ;AACA;AACA;;AACY,aAAOlB,QAAP;AACH,KAPD,MAQK;AACDQ,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACH;AACJ,GArBY,EAqBVK,KArBU,CAqBJD,KAAK,IAAI;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,WAAOA,KAAP;AACH,GAzBY,CAAb;AA0BH","sourcesContent":["import axios from 'axios';\nimport * as route from '../config/Routes';\n\nexport const SHOW_IMAGE_UPLOAD_DIALOG = 'SHOW_IMAGE_UPLOAD_DIALOG';\nexport const HIDE_IMAGE_UPLOAD_DIALOG = 'HIDE_IMAGE_UPLOAD_DIALOG';\nexport const UPLOAD_PENDING = 'UPLOAD PENDING';\nexport const UPLOAD_SUCCESS = 'UPLOAD_SUCCESS';\nexport const UPLOAD_ERROR = 'UPLOAD_ERROR';\n\nexport function getShowImageUploadDialogAction(){\n    return {\n        type: SHOW_IMAGE_UPLOAD_DIALOG\n    }\n}\n\nexport function getHideImageUploadDialogAction(){\n    return {\n        type: HIDE_IMAGE_UPLOAD_DIALOG\n    }\n}\n\nexport function getUploadPendingAction(){\n    return {\n        type: UPLOAD_PENDING\n    }\n}\n\nexport function getUploadSuccessAction(response){\n    return {\n        type: UPLOAD_SUCCESS,\n        response: response\n    }\n}\n\nexport function getUploadErrorAction(){\n    return {\n        type: UPLOAD_ERROR\n    }\n}\n\n/**\n * @param token - user session token\n * @param formData - uploaded image wrapped in a form\n * \n * This function calls the upload function and handels the response.\n * It dispatches the actions.\n*/\nexport function imageUpload(token, formData) {\n    return dispatch => {\n        dispatch(getUploadPendingAction());\n        upload(token, formData)\n            .then(function(response){\n                console.log(\"imageUpload response: \" + JSON.stringify(response));\n                const action = getUploadSuccessAction(response);\n                dispatch(action);\n            },\n            error =>{\n                dispatch(getUploadErrorAction(error));\n            })\n            .catch(error =>{\n                dispatch(getUploadErrorAction(error));\n            })\n    }\n}\n\n/**\n * @param token - user session token\n * @param formData - uploaded image wrapped in a form\n * \n * This function sends the image included in the formData to the\n * backend and returns the response recieved from the backend. \n*/\nasync function upload(token, formData) {\n\n    return await axios({\n        method: \"post\",\n        url: route.IMAGE_UPLOAD,\n        data: formData,\n        headers: {\n            \"token\": token,\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    })\n    .then(response => {\n        if(response.status === 200) {\n            console.log(\"Response from image upload: \" + JSON.stringify(response.data))\n            /* TODO\n            *  Je nachdem was der Server returned, können wir hier die Daten aufbereiten,\n            *  eh sie an die components übergeben werden.\n            */\n            return response;\n        }\n        else {\n            console.log(\"Error occured in image upload response.\")\n        }   \n    }).catch(error => {\n        console.log(\"Error occured in image upload.\")\n        console.log(error)\n        return(error)\n    })\n}"]},"metadata":{},"sourceType":"module"}