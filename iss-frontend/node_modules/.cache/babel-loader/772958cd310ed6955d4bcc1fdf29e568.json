{"ast":null,"code":"export const FETCH_IMAGES_PENDING = 'FETCH_IMAGES_PENDING';\nexport const FETCH_IMAGES_SUCCESS = 'FETCH_IMAGES_SUCCESS';\nexport const FETCH_IMAGES_ERROR = 'FETCH_IMAGES_ERROR';\nexport function fetchImagesPendingAction() {\n  return {\n    type: FETCH_IMAGES_PENDING\n  };\n}\nexport function fetchImagesSuccessAction(images) {\n  return {\n    type: FETCH_IMAGES_SUCCESS,\n    images: images\n  };\n}\nexport function fetchImagesErrorAction(error) {\n  return {\n    type: FETCH_IMAGES_ERROR,\n    error: error\n  };\n}\n/**\n * This function calls the fetchImages() function and \n * dispatches the actions.\n*/\n\nexport function getImagesFromDb() {\n  return dispatch => {\n    dispatch(fetchImagesPendingAction());\n    fetchImages().then(function (images) {\n      const action = fetchImagesSuccessAction(images);\n      dispatch(action);\n    }, error => {\n      dispatch(fetchImagesErrorAction(error));\n    }).catch(error => {\n      dispatch(fetchImagesErrorAction(error));\n    });\n  };\n}\n/**\n * This function fetches the images.\n * @returns array of images recieved from the backend \n */\n\nexport function fetchImages() {\n  var restUrl = route.FETCH_IMAGES;\n  console.log(\"Fetch Images from: \" + restUrl);\n  return fetch(restUrl).then(handleResponse).then(images => {\n    return images;\n  });\n}\n/**\n * This funtion handels the response from the backend.\n * @param response - response recieved from the backend\n * @returns array with images\n */\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    var images = JSON.parse(text);\n    var imagesArray = [];\n\n    for (let i = 0; i < images.length; i++) {\n      // TODO: richtige Parameter abrufen, diese hier sind nur Platzhalter.\n      let image = {\n        _id: images[i]._id,\n        x: images[i].x,\n        y: images[i].y,\n        url: images[i].url\n      };\n      imagesArray.push(image);\n    }\n\n    return imagesArray;\n  });\n}","map":{"version":3,"sources":["/Users/anne/Documents/Studium/Beuth_MI/Semester 5/Projekt/iss-frontend/src/actions/FetchImagesActions.js"],"names":["FETCH_IMAGES_PENDING","FETCH_IMAGES_SUCCESS","FETCH_IMAGES_ERROR","fetchImagesPendingAction","type","fetchImagesSuccessAction","images","fetchImagesErrorAction","error","getImagesFromDb","dispatch","fetchImages","then","action","catch","restUrl","route","FETCH_IMAGES","console","log","fetch","handleResponse","response","text","JSON","parse","imagesArray","i","length","image","_id","x","y","url","push"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAGP,OAAO,SAASC,wBAAT,GAAmC;AACtC,SAAO;AACHC,IAAAA,IAAI,EAAEJ;AADH,GAAP;AAGH;AAED,OAAO,SAASK,wBAAT,CAAkCC,MAAlC,EAAyC;AAC5C,SAAO;AACHF,IAAAA,IAAI,EAAEH,oBADH;AAEHK,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH;AAED,OAAO,SAASC,sBAAT,CAAgCC,KAAhC,EAAsC;AACzC,SAAO;AACHJ,IAAAA,IAAI,EAAEF,kBADH;AAEHM,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,GAA2B;AAE9B,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACP,wBAAwB,EAAzB,CAAR;AACAQ,IAAAA,WAAW,GACNC,IADL,CAEQ,UAASN,MAAT,EAAgB;AACZ,YAAMO,MAAM,GAAGR,wBAAwB,CAACC,MAAD,CAAvC;AACAI,MAAAA,QAAQ,CAACG,MAAD,CAAR;AACH,KALT,EAMQL,KAAK,IAAI;AACLE,MAAAA,QAAQ,CAACH,sBAAsB,CAACC,KAAD,CAAvB,CAAR;AACH,KART,EAUKM,KAVL,CAUWN,KAAK,IAAI;AACZE,MAAAA,QAAQ,CAACH,sBAAsB,CAACC,KAAD,CAAvB,CAAR;AACH,KAZL;AAaH,GAfD;AAgBH;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASG,WAAT,GAAsB;AAEzB,MAAII,OAAO,GAAGC,KAAK,CAACC,YAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBJ,OAApC;AAEA,SAAOK,KAAK,CAACL,OAAD,CAAL,CACFH,IADE,CACGS,cADH,EAEFT,IAFE,CAEGN,MAAM,IAAI;AACZ,WAAOA,MAAP;AACP,GAJM,CAAP;AAKH;AAED;AACA;AACA;AACA;AACA;;AACA,SAASe,cAAT,CAAwBC,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBX,IAAhB,CAAqBW,IAAI,IAAI;AAChC,QAAIjB,MAAM,GAAGkB,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAb;AAEA,QAAIG,WAAW,GAAG,EAAlB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGrB,MAAM,CAACsB,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC;AACA,UAAIE,KAAK,GAAG;AACRC,QAAAA,GAAG,EAAExB,MAAM,CAACqB,CAAD,CAAN,CAAUG,GADP;AAERC,QAAAA,CAAC,EAAEzB,MAAM,CAACqB,CAAD,CAAN,CAAUI,CAFL;AAGRC,QAAAA,CAAC,EAAE1B,MAAM,CAACqB,CAAD,CAAN,CAAUK,CAHL;AAIRC,QAAAA,GAAG,EAAE3B,MAAM,CAACqB,CAAD,CAAN,CAAUM;AAJP,OAAZ;AAMAP,MAAAA,WAAW,CAACQ,IAAZ,CAAiBL,KAAjB;AACH;;AAED,WAAOH,WAAP;AACH,GAhBM,CAAP;AAiBH","sourcesContent":["export const FETCH_IMAGES_PENDING = 'FETCH_IMAGES_PENDING';\nexport const FETCH_IMAGES_SUCCESS = 'FETCH_IMAGES_SUCCESS';\nexport const FETCH_IMAGES_ERROR = 'FETCH_IMAGES_ERROR';\n\n\nexport function fetchImagesPendingAction(){\n    return {\n        type: FETCH_IMAGES_PENDING\n    }\n}\n\nexport function fetchImagesSuccessAction(images){\n    return {\n        type: FETCH_IMAGES_SUCCESS,\n        images: images\n    }\n}\n\nexport function fetchImagesErrorAction(error){\n    return {\n        type: FETCH_IMAGES_ERROR,\n        error: error\n    }\n}\n\n/**\n * This function calls the fetchImages() function and \n * dispatches the actions.\n*/\nexport function getImagesFromDb() {\n\n    return dispatch => {\n        dispatch(fetchImagesPendingAction());\n        fetchImages()\n            .then (\n                function(images){\n                    const action = fetchImagesSuccessAction(images);\n                    dispatch(action);\n                },\n                error => {\n                    dispatch(fetchImagesErrorAction(error));\n                }\n            )\n            .catch(error => {\n                dispatch(fetchImagesErrorAction(error));\n            })\n    }\n}\n\n/**\n * This function fetches the images.\n * @returns array of images recieved from the backend \n */\nexport function fetchImages(){\n    \n    var restUrl = route.FETCH_IMAGES;\n    console.log(\"Fetch Images from: \" + restUrl);\n\n    return fetch(restUrl)\n        .then(handleResponse)\n        .then(images => {\n            return images;\n    });\n}\n\n/**\n * This funtion handels the response from the backend.\n * @param response - response recieved from the backend\n * @returns array with images\n */\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        var images = JSON.parse(text)\n\n        var imagesArray = []\n        for(let i = 0; i < images.length; i++){\n            // TODO: richtige Parameter abrufen, diese hier sind nur Platzhalter.\n            let image = {\n                _id: images[i]._id,\n                x: images[i].x,\n                y: images[i].y,\n                url: images[i].url\n            }\n            imagesArray.push(image)\n        }\n        \n        return imagesArray;\n    });\n}"]},"metadata":{},"sourceType":"module"}